import sys

from cloud_framework import BaseCloudInterfce, CloudFactory
from common_def import service_logger


class KubernetesCloudInterfce(BaseCloudInterfce):
    """ Base class to define instance plugin interface. """

    def __init__(self):
        """ constructor method for instance"""
        pass

    def connect_to_peer(self):
        """ establish connection with peer """
        pass

    def getRegion(self):
        """ returns instance list """
        service_logger.info("Udita KubernetesCloudInterfce :%s", self)
        return "K8sEvent_getRegion"

    def addRegion(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def deleteRegion(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def updateRegion(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def getVpc(self,payload):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def addVpc(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def deleteVpc(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def updateVpc(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def getSecurityGroup(self,payload):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)
        if(payload['namespace']):
            return v1_ext.list_namespaced_network_policy(payload['namespace'])     
        else:
            return v1_ext.list_network_policy_for_all_namespaces()

    def addSecurityGroup(self,payload):
        service_logger.info("%s %s %s ", sys._getframe().f_code.co_name, "payload :", payload)
        namespace = payload['namespace']
        body = client.V1beta1NetworkPolicy() # V1beta1NetworkPolicy |
        pretty = 'pretty_example' # str | If 'true', then the output is pretty printed. (optional)
        body.metadata = client.V1ObjectMeta()
        body.metadata.name = payload['name']
        try:
            api_response = v1_ext.create_namespaced_network_policy(namespace, body, pretty=pretty)
        except ApiException as e:
            service_logger.error("Exception when calling ExtensionsV1beta1Api->create_namespaced_network_policy: %s\n" % e)


    def deleteSecurityGroup(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def updateSecurityGroup(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def getIngressRule(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)
    
    def addIngressRule(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def deleteIngressRule(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def updateIngressRule(self,payload):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def getEgressRule(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def addEgressRule(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def deleteEgressRule(self):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)

    def updateEgressRule(self,payload):
        service_logger.error("%s %s %s ", sys._getframe().f_code.co_name, "This service is not supported for :%s", self)
        namespace = payload['namespace']
        name = payload['name']
        body = get_network_policy_obj(namespace,name)
        if( not body):
            logger_info("Object (%s) not found \n" % name )
            return
        try: 
            body.spec.egress = [client.V1beta1NetworkPolicyEgressRule()]
            body.spec.egress[0].ports = [{'port': 80, 'protocol': 'TCP'}]
            api_response = v1_ext.patch_namespaced_network_policy(name, namespace, body, pretty=pretty)
        except ApiException as e:
            logger_info("Exception when calling ExtensionsV1beta1Api->patch_namespaced_network_policy: %s\n" % e)



class KubernetesCloud(CloudFactory):
    def __init__(cls,name):
        super().__init__(KubernetesCloudInterfce())
        service_logger.info("Kubernetes instance (%s) created ", name)
        #cls.index = super(AwsCloud).counter
        #self.cloud_name = name
        #return obj
    '''    
    def __init__(self,name):
        service_logger.info("creating Kubernetes instance ")
        super().__init__(KubernetesCloudInterfce())
        self.cloud_name = name
        cls.index = super(AwsCloud).counter
    '''
    def getCloudName(self):
        return self.cloud_name





